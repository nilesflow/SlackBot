{
  "swagger": "2.0",
  "info": {
    "version": "2018-06-03T15:39:34Z",
    "title": "SlackBot"
  },
  "host": "xxxxxxxxx.execute-api.ap-northeast-1.amazonaws.com",
  "basePath": "/prod",
  "schemes": [
    "https"
  ],
  "paths": {
    "/event": {
      "post": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          },
          "400": {
            "description": "400 response"
          },
          "500": {
            "description": "500 response"
          }
        },
        "x-amazon-apigateway-integration": {
          "uri": "arn:aws:apigateway:ap-northeast-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-northeast-1:707983430756:function:SlackBot/invocations",
          "responses": {
            "default": {
              "statusCode": "200",
              "responseTemplates": {
                "application/json": "#set($inputRoot = $input.path('$'))\r\n{\r\n    #foreach($type in $inputRoot.keySet())\r\n    \"$type\" : \"$util.escapeJavaScript($inputRoot.get($type))\"\r\n    #if($foreach.hasNext),#end\r\n    #end\r\n}"
              }
            },
            ".*\"code\":400.*": {
              "statusCode": "400",
              "responseTemplates": {
                "application/json": "#set ($e = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"error\": $e.error,\r\n  \"message\" : $e.errorMessage\r\n}"
              }
            },
            ".*\"errorMessage\":.*": {
              "statusCode": "500",
              "responseTemplates": {
                "application/json": "#set ($e = $util.parseJson($input.path('$.errorMessage')))\r\n## Lambda関数コード内で500指定された場合\r\n#if ($e.code == 500)\r\n{\r\n    \"error\": \"$e.error\",\r\n    \"message\" : \"$e.errorMessage\"\r\n}\r\n## Lambda関数コード以外のエラー\r\n#else\r\n{\r\n    \"error\": \"InternalError\",\r\n    \"message\" : \"$input.path('$.errorMessage')\"\r\n}\r\n#end\r\n"
              }
            }
          },
          "passthroughBehavior": "when_no_match",
          "httpMethod": "POST",
          "contentHandling": "CONVERT_TO_TEXT",
          "type": "aws"
        }
      }
    }
  },
  "definitions": {
    "Empty": {
      "type": "object",
      "title": "Empty Schema"
    }
  }
}